/*
 * Salt Edge Payment Initiation API
 * API Reference for services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@saltedge.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.utm.gitfit.model.client.api;

import com.google.gson.reflect.TypeToken;
import com.utm.gitfit.client.*;
import com.utm.gitfit.model.client.*;
import com.utm.gitfit.model.client.model.PaymentsList;
import com.utm.gitfit.model.client.model.RemovedPayment;
import com.utm.gitfit.model.client.model.SinglePayment;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient apiClient;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for paymentsGet
     * @param customerId  (required)
     * @param fromId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call paymentsGetCall(String customerId, String fromId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_id", fromId));
        if (customerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customer_id", customerId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "app_id", "secret" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call paymentsGetValidateBeforeCall(String customerId, String fromId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling paymentsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = paymentsGetCall(customerId, fromId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of payments
     * Returns all the payments accessible to your application. The payments are sorted in ascending order of their &#x60;ids&#x60;, so the newest payments will come last. We recommend you fetch the whole list of payments to check whether any of the properties have changed. You can read more about &#x60;next_id&#x60; field in the [pagination](/general/#pagination) section of the reference. 
     * @param customerId  (required)
     * @param fromId  (optional)
     * @return PaymentsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentsList paymentsGet(String customerId, String fromId) throws ApiException {
        ApiResponse<PaymentsList> resp = paymentsGetWithHttpInfo(customerId, fromId);
        return resp.getData();
    }

    /**
     * List of payments
     * Returns all the payments accessible to your application. The payments are sorted in ascending order of their &#x60;ids&#x60;, so the newest payments will come last. We recommend you fetch the whole list of payments to check whether any of the properties have changed. You can read more about &#x60;next_id&#x60; field in the [pagination](/general/#pagination) section of the reference. 
     * @param customerId  (required)
     * @param fromId  (optional)
     * @return ApiResponse&lt;PaymentsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentsList> paymentsGetWithHttpInfo(String customerId, String fromId) throws ApiException {
        com.squareup.okhttp.Call call = paymentsGetValidateBeforeCall(customerId, fromId, null, null);
        Type localVarReturnType = new TypeToken<PaymentsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of payments (asynchronously)
     * Returns all the payments accessible to your application. The payments are sorted in ascending order of their &#x60;ids&#x60;, so the newest payments will come last. We recommend you fetch the whole list of payments to check whether any of the properties have changed. You can read more about &#x60;next_id&#x60; field in the [pagination](/general/#pagination) section of the reference. 
     * @param customerId  (required)
     * @param fromId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call paymentsGetAsync(String customerId, String fromId, final ApiCallback<PaymentsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = paymentsGetValidateBeforeCall(customerId, fromId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for paymentsPaymentIdDelete
     * @param paymentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call paymentsPaymentIdDeleteCall(String paymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payments/{payment_id}"
            .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "app_id", "secret" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call paymentsPaymentIdDeleteValidateBeforeCall(String paymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling paymentsPaymentIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = paymentsPaymentIdDeleteCall(paymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove payment
     * Removes a payment from our system. It is possible to remove only finished payments, failed or succeeded. 
     * @param paymentId  (required)
     * @return RemovedPayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemovedPayment paymentsPaymentIdDelete(String paymentId) throws ApiException {
        ApiResponse<RemovedPayment> resp = paymentsPaymentIdDeleteWithHttpInfo(paymentId);
        return resp.getData();
    }

    /**
     * Remove payment
     * Removes a payment from our system. It is possible to remove only finished payments, failed or succeeded. 
     * @param paymentId  (required)
     * @return ApiResponse&lt;RemovedPayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemovedPayment> paymentsPaymentIdDeleteWithHttpInfo(String paymentId) throws ApiException {
        com.squareup.okhttp.Call call = paymentsPaymentIdDeleteValidateBeforeCall(paymentId, null, null);
        Type localVarReturnType = new TypeToken<RemovedPayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove payment (asynchronously)
     * Removes a payment from our system. It is possible to remove only finished payments, failed or succeeded. 
     * @param paymentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call paymentsPaymentIdDeleteAsync(String paymentId, final ApiCallback<RemovedPayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = paymentsPaymentIdDeleteValidateBeforeCall(paymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemovedPayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for paymentsPaymentIdGet
     * @param paymentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call paymentsPaymentIdGetCall(String paymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payments/{payment_id}"
            .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "app_id", "secret" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call paymentsPaymentIdGetValidateBeforeCall(String paymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling paymentsPaymentIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = paymentsPaymentIdGetCall(paymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Show payment
     * Returns a single payment object.
     * @param paymentId  (required)
     * @return SinglePayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SinglePayment paymentsPaymentIdGet(String paymentId) throws ApiException {
        ApiResponse<SinglePayment> resp = paymentsPaymentIdGetWithHttpInfo(paymentId);
        return resp.getData();
    }

    /**
     * Show payment
     * Returns a single payment object.
     * @param paymentId  (required)
     * @return ApiResponse&lt;SinglePayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SinglePayment> paymentsPaymentIdGetWithHttpInfo(String paymentId) throws ApiException {
        com.squareup.okhttp.Call call = paymentsPaymentIdGetValidateBeforeCall(paymentId, null, null);
        Type localVarReturnType = new TypeToken<SinglePayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show payment (asynchronously)
     * Returns a single payment object.
     * @param paymentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call paymentsPaymentIdGetAsync(String paymentId, final ApiCallback<SinglePayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = paymentsPaymentIdGetValidateBeforeCall(paymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SinglePayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for paymentsPaymentIdRefreshPut
     * @param paymentId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call paymentsPaymentIdRefreshPutCall(String paymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payments/{payment_id}/refresh"
            .replaceAll("\\{" + "payment_id" + "\\}", apiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "app_id", "secret" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call paymentsPaymentIdRefreshPutValidateBeforeCall(String paymentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling paymentsPaymentIdRefreshPut(Async)");
        }
        
        com.squareup.okhttp.Call call = paymentsPaymentIdRefreshPutCall(paymentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Refresh payment status
     * Allows you to trigger a refresh of the payment status.
     * @param paymentId  (required)
     * @return SinglePayment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SinglePayment paymentsPaymentIdRefreshPut(String paymentId) throws ApiException {
        ApiResponse<SinglePayment> resp = paymentsPaymentIdRefreshPutWithHttpInfo(paymentId);
        return resp.getData();
    }

    /**
     * Refresh payment status
     * Allows you to trigger a refresh of the payment status.
     * @param paymentId  (required)
     * @return ApiResponse&lt;SinglePayment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SinglePayment> paymentsPaymentIdRefreshPutWithHttpInfo(String paymentId) throws ApiException {
        com.squareup.okhttp.Call call = paymentsPaymentIdRefreshPutValidateBeforeCall(paymentId, null, null);
        Type localVarReturnType = new TypeToken<SinglePayment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Refresh payment status (asynchronously)
     * Allows you to trigger a refresh of the payment status.
     * @param paymentId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call paymentsPaymentIdRefreshPutAsync(String paymentId, final ApiCallback<SinglePayment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = paymentsPaymentIdRefreshPutValidateBeforeCall(paymentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SinglePayment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
