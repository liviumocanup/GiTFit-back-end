/*
 * Salt Edge Payment Initiation API
 * API Reference for services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@saltedge.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.utm.gitfit.model.client.api;

import com.google.gson.reflect.TypeToken;
import com.utm.gitfit.client.*;
import com.utm.gitfit.model.client.model.ProviderResponse;
import com.utm.gitfit.model.client.model.ProvidersResponse;
import com.utm.gitfit.model.client.*;
import org.threeten.bp.LocalDate;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProvidersApi {
    private ApiClient apiClient;

    public ProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProvidersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for providersGet
     * @param fromId  (optional)
     * @param fromDate  (optional)
     * @param countryCode  (optional)
     * @param mode  (optional)
     * @param includeFakeProviders  (optional)
     * @param templateIdentifier  (optional)
     * @param includeProviderFields  (optional)
     * @param providerKeyOwner  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call providersGetCall(String fromId, LocalDate fromDate, String countryCode, String mode, Boolean includeFakeProviders, String templateIdentifier, Boolean includeProviderFields, String providerKeyOwner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_id", fromId));
        if (fromDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from_date", fromDate));
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country_code", countryCode));
        if (mode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));
        if (includeFakeProviders != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_fake_providers", includeFakeProviders));
        if (templateIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("template_identifier", templateIdentifier));
        if (includeProviderFields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_provider_fields", includeProviderFields));
        if (providerKeyOwner != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider_key_owner", providerKeyOwner));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "app_id", "secret" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call providersGetValidateBeforeCall(String fromId, LocalDate fromDate, String countryCode, String mode, Boolean includeFakeProviders, String templateIdentifier, Boolean includeProviderFields, String providerKeyOwner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = providersGetCall(fromId, fromDate, countryCode, mode, includeFakeProviders, templateIdentifier, includeProviderFields, providerKeyOwner, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List of providers
     * Returns all the providers we operate with. If a provider becomes disabled, it is not included in the list. You can read more about the &#x60;next_id&#x60; field, in the pagination section of the reference. Providers that require a client provider key will be included only if you have created provider keys for them. 
     * @param fromId  (optional)
     * @param fromDate  (optional)
     * @param countryCode  (optional)
     * @param mode  (optional)
     * @param includeFakeProviders  (optional)
     * @param templateIdentifier  (optional)
     * @param includeProviderFields  (optional)
     * @param providerKeyOwner  (optional)
     * @return ProvidersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersResponse providersGet(String fromId, LocalDate fromDate, String countryCode, String mode, Boolean includeFakeProviders, String templateIdentifier, Boolean includeProviderFields, String providerKeyOwner) throws ApiException {
        ApiResponse<ProvidersResponse> resp = providersGetWithHttpInfo(fromId, fromDate, countryCode, mode, includeFakeProviders, templateIdentifier, includeProviderFields, providerKeyOwner);
        return resp.getData();
    }

    /**
     * List of providers
     * Returns all the providers we operate with. If a provider becomes disabled, it is not included in the list. You can read more about the &#x60;next_id&#x60; field, in the pagination section of the reference. Providers that require a client provider key will be included only if you have created provider keys for them. 
     * @param fromId  (optional)
     * @param fromDate  (optional)
     * @param countryCode  (optional)
     * @param mode  (optional)
     * @param includeFakeProviders  (optional)
     * @param templateIdentifier  (optional)
     * @param includeProviderFields  (optional)
     * @param providerKeyOwner  (optional)
     * @return ApiResponse&lt;ProvidersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersResponse> providersGetWithHttpInfo(String fromId, LocalDate fromDate, String countryCode, String mode, Boolean includeFakeProviders, String templateIdentifier, Boolean includeProviderFields, String providerKeyOwner) throws ApiException {
        com.squareup.okhttp.Call call = providersGetValidateBeforeCall(fromId, fromDate, countryCode, mode, includeFakeProviders, templateIdentifier, includeProviderFields, providerKeyOwner, null, null);
        Type localVarReturnType = new TypeToken<ProvidersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of providers (asynchronously)
     * Returns all the providers we operate with. If a provider becomes disabled, it is not included in the list. You can read more about the &#x60;next_id&#x60; field, in the pagination section of the reference. Providers that require a client provider key will be included only if you have created provider keys for them. 
     * @param fromId  (optional)
     * @param fromDate  (optional)
     * @param countryCode  (optional)
     * @param mode  (optional)
     * @param includeFakeProviders  (optional)
     * @param templateIdentifier  (optional)
     * @param includeProviderFields  (optional)
     * @param providerKeyOwner  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call providersGetAsync(String fromId, LocalDate fromDate, String countryCode, String mode, Boolean includeFakeProviders, String templateIdentifier, Boolean includeProviderFields, String providerKeyOwner, final ApiCallback<ProvidersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = providersGetValidateBeforeCall(fromId, fromDate, countryCode, mode, includeFakeProviders, templateIdentifier, includeProviderFields, providerKeyOwner, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for providersProviderCodeGet
     * @param providerCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call providersProviderCodeGetCall(String providerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/providers/{provider_code}"
            .replaceAll("\\{" + "provider_code" + "\\}", apiClient.escapeString(providerCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "app_id", "secret" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call providersProviderCodeGetValidateBeforeCall(String providerCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'providerCode' is set
        if (providerCode == null) {
            throw new ApiException("Missing the required parameter 'providerCode' when calling providersProviderCodeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = providersProviderCodeGetCall(providerCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Show provider
     * Allows you to inspect a single provider in order to give your users a proper interface to input their credentials. The response will have an array of &#x60;required_fields&#x60; and &#x60;interactive_fields&#x60;. 
     * @param providerCode  (required)
     * @return ProviderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProviderResponse providersProviderCodeGet(String providerCode) throws ApiException {
        ApiResponse<ProviderResponse> resp = providersProviderCodeGetWithHttpInfo(providerCode);
        return resp.getData();
    }

    /**
     * Show provider
     * Allows you to inspect a single provider in order to give your users a proper interface to input their credentials. The response will have an array of &#x60;required_fields&#x60; and &#x60;interactive_fields&#x60;. 
     * @param providerCode  (required)
     * @return ApiResponse&lt;ProviderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProviderResponse> providersProviderCodeGetWithHttpInfo(String providerCode) throws ApiException {
        com.squareup.okhttp.Call call = providersProviderCodeGetValidateBeforeCall(providerCode, null, null);
        Type localVarReturnType = new TypeToken<ProviderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show provider (asynchronously)
     * Allows you to inspect a single provider in order to give your users a proper interface to input their credentials. The response will have an array of &#x60;required_fields&#x60; and &#x60;interactive_fields&#x60;. 
     * @param providerCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call providersProviderCodeGetAsync(String providerCode, final ApiCallback<ProviderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = providersProviderCodeGetValidateBeforeCall(providerCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProviderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
