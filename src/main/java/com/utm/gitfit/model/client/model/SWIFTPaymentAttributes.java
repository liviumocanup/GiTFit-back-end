/*
 * Salt Edge Payment Initiation API
 * API Reference for services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@saltedge.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.utm.gitfit.model.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;
/**
 * SWIFTPaymentAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-11-21T15:13:42.040Z[GMT]")
public class SWIFTPaymentAttributes extends CommonPaymentAttributes implements PaymentAttributes {
  @SerializedName("currency_code")
  private String currencyCode = "USD";

  @SerializedName("debtor_account_number")
  private String debtorAccountNumber = null;

  @SerializedName("creditor_account_number")
  private String creditorAccountNumber = null;

  @SerializedName("creditor_bank_swift_code")
  private String creditorBankSwiftCode = null;

  @SerializedName("creditor_bank_name")
  private String creditorBankName = null;

  @SerializedName("creditor_bank_address")
  private String creditorBankAddress = null;

  @SerializedName("creditor_bank_street_name")
  private String creditorBankStreetName = null;

  @SerializedName("creditor_bank_building_number")
  private String creditorBankBuildingNumber = null;

  @SerializedName("creditor_bank_post_code")
  private String creditorBankPostCode = null;

  @SerializedName("creditor_bank_town")
  private String creditorBankTown = null;

  @SerializedName("creditor_bank_region")
  private String creditorBankRegion = null;

  @SerializedName("creditor_bank_country_code")
  private String creditorBankCountryCode = null;

  @SerializedName("correspondent_account_number")
  private String correspondentAccountNumber = null;

  @SerializedName("correspondent_bank_name")
  private String correspondentBankName = null;

  @SerializedName("correspondent_bank_address")
  private String correspondentBankAddress = null;

  @SerializedName("correspondent_bank_swift_code")
  private String correspondentBankSwiftCode = null;

  /**
   * Gets or Sets chargeBearer
   */
  @JsonAdapter(ChargeBearerEnum.Adapter.class)
  public enum ChargeBearerEnum {
    CREDITOR("CREDITOR"),
    DEBTOR("DEBTOR"),
    SHARED("SHARED");

    private String value;

    ChargeBearerEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargeBearerEnum fromValue(String input) {
      for (ChargeBearerEnum b : ChargeBearerEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargeBearerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeBearerEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargeBearerEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargeBearerEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("charge_bearer")
  private ChargeBearerEnum chargeBearer = ChargeBearerEnum.CREDITOR;

  /**
   * Gets or Sets priority
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    NORMAL("NORMAL"),
    URGENT("URGENT"),
    SYSTEM("SYSTEM");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PriorityEnum fromValue(String input) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PriorityEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("priority")
  private PriorityEnum priority = PriorityEnum.NORMAL;

  public SWIFTPaymentAttributes currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency of the payment.
   * @return currencyCode
  **/
  @Schema(required = true, description = "The currency of the payment.")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public SWIFTPaymentAttributes debtorAccountNumber(String debtorAccountNumber) {
    this.debtorAccountNumber = debtorAccountNumber;
    return this;
  }

   /**
   * The debtor&#x27;s account number
   * @return debtorAccountNumber
  **/
  @Schema(description = "The debtor's account number")
  public String getDebtorAccountNumber() {
    return debtorAccountNumber;
  }

  public void setDebtorAccountNumber(String debtorAccountNumber) {
    this.debtorAccountNumber = debtorAccountNumber;
  }

  public SWIFTPaymentAttributes creditorAccountNumber(String creditorAccountNumber) {
    this.creditorAccountNumber = creditorAccountNumber;
    return this;
  }

   /**
   * The creditor&#x27;s account number
   * @return creditorAccountNumber
  **/
  @Schema(required = true, description = "The creditor's account number")
  public String getCreditorAccountNumber() {
    return creditorAccountNumber;
  }

  public void setCreditorAccountNumber(String creditorAccountNumber) {
    this.creditorAccountNumber = creditorAccountNumber;
  }

  public SWIFTPaymentAttributes creditorBankSwiftCode(String creditorBankSwiftCode) {
    this.creditorBankSwiftCode = creditorBankSwiftCode;
    return this;
  }

   /**
   * The creditor&#x27;s bank SWIFT code
   * @return creditorBankSwiftCode
  **/
  @Schema(required = true, description = "The creditor's bank SWIFT code")
  public String getCreditorBankSwiftCode() {
    return creditorBankSwiftCode;
  }

  public void setCreditorBankSwiftCode(String creditorBankSwiftCode) {
    this.creditorBankSwiftCode = creditorBankSwiftCode;
  }

  public SWIFTPaymentAttributes creditorBankName(String creditorBankName) {
    this.creditorBankName = creditorBankName;
    return this;
  }

   /**
   * The creditor&#x27;s bank name
   * @return creditorBankName
  **/
  @Schema(required = true, description = "The creditor's bank name")
  public String getCreditorBankName() {
    return creditorBankName;
  }

  public void setCreditorBankName(String creditorBankName) {
    this.creditorBankName = creditorBankName;
  }

  public SWIFTPaymentAttributes creditorBankAddress(String creditorBankAddress) {
    this.creditorBankAddress = creditorBankAddress;
    return this;
  }

   /**
   * The creditor&#x27;s bank full address
   * @return creditorBankAddress
  **/
  @Schema(description = "The creditor's bank full address")
  public String getCreditorBankAddress() {
    return creditorBankAddress;
  }

  public void setCreditorBankAddress(String creditorBankAddress) {
    this.creditorBankAddress = creditorBankAddress;
  }

  public SWIFTPaymentAttributes creditorBankStreetName(String creditorBankStreetName) {
    this.creditorBankStreetName = creditorBankStreetName;
    return this;
  }

   /**
   * The creditor&#x27;s bank street name
   * @return creditorBankStreetName
  **/
  @Schema(required = true, description = "The creditor's bank street name")
  public String getCreditorBankStreetName() {
    return creditorBankStreetName;
  }

  public void setCreditorBankStreetName(String creditorBankStreetName) {
    this.creditorBankStreetName = creditorBankStreetName;
  }

  public SWIFTPaymentAttributes creditorBankBuildingNumber(String creditorBankBuildingNumber) {
    this.creditorBankBuildingNumber = creditorBankBuildingNumber;
    return this;
  }

   /**
   * The creditor&#x27;s bank building number
   * @return creditorBankBuildingNumber
  **/
  @Schema(required = true, description = "The creditor's bank building number")
  public String getCreditorBankBuildingNumber() {
    return creditorBankBuildingNumber;
  }

  public void setCreditorBankBuildingNumber(String creditorBankBuildingNumber) {
    this.creditorBankBuildingNumber = creditorBankBuildingNumber;
  }

  public SWIFTPaymentAttributes creditorBankPostCode(String creditorBankPostCode) {
    this.creditorBankPostCode = creditorBankPostCode;
    return this;
  }

   /**
   * The creditor&#x27;s bank post code
   * @return creditorBankPostCode
  **/
  @Schema(required = true, description = "The creditor's bank post code")
  public String getCreditorBankPostCode() {
    return creditorBankPostCode;
  }

  public void setCreditorBankPostCode(String creditorBankPostCode) {
    this.creditorBankPostCode = creditorBankPostCode;
  }

  public SWIFTPaymentAttributes creditorBankTown(String creditorBankTown) {
    this.creditorBankTown = creditorBankTown;
    return this;
  }

   /**
   * The creditor&#x27;s bank town/city
   * @return creditorBankTown
  **/
  @Schema(required = true, description = "The creditor's bank town/city")
  public String getCreditorBankTown() {
    return creditorBankTown;
  }

  public void setCreditorBankTown(String creditorBankTown) {
    this.creditorBankTown = creditorBankTown;
  }

  public SWIFTPaymentAttributes creditorBankRegion(String creditorBankRegion) {
    this.creditorBankRegion = creditorBankRegion;
    return this;
  }

   /**
   * The creditor&#x27;s bank country/region
   * @return creditorBankRegion
  **/
  @Schema(description = "The creditor's bank country/region")
  public String getCreditorBankRegion() {
    return creditorBankRegion;
  }

  public void setCreditorBankRegion(String creditorBankRegion) {
    this.creditorBankRegion = creditorBankRegion;
  }

  public SWIFTPaymentAttributes creditorBankCountryCode(String creditorBankCountryCode) {
    this.creditorBankCountryCode = creditorBankCountryCode;
    return this;
  }

   /**
   * The creditor&#x27;s bank ISO country code
   * @return creditorBankCountryCode
  **/
  @Schema(required = true, description = "The creditor's bank ISO country code")
  public String getCreditorBankCountryCode() {
    return creditorBankCountryCode;
  }

  public void setCreditorBankCountryCode(String creditorBankCountryCode) {
    this.creditorBankCountryCode = creditorBankCountryCode;
  }

  public SWIFTPaymentAttributes correspondentAccountNumber(String correspondentAccountNumber) {
    this.correspondentAccountNumber = correspondentAccountNumber;
    return this;
  }

   /**
   * The correspondent&#x27;s account number
   * @return correspondentAccountNumber
  **/
  @Schema(description = "The correspondent's account number")
  public String getCorrespondentAccountNumber() {
    return correspondentAccountNumber;
  }

  public void setCorrespondentAccountNumber(String correspondentAccountNumber) {
    this.correspondentAccountNumber = correspondentAccountNumber;
  }

  public SWIFTPaymentAttributes correspondentBankName(String correspondentBankName) {
    this.correspondentBankName = correspondentBankName;
    return this;
  }

   /**
   * The correspondent&#x27;s bank name
   * @return correspondentBankName
  **/
  @Schema(description = "The correspondent's bank name")
  public String getCorrespondentBankName() {
    return correspondentBankName;
  }

  public void setCorrespondentBankName(String correspondentBankName) {
    this.correspondentBankName = correspondentBankName;
  }

  public SWIFTPaymentAttributes correspondentBankAddress(String correspondentBankAddress) {
    this.correspondentBankAddress = correspondentBankAddress;
    return this;
  }

   /**
   * The correspondent&#x27;s bank full address
   * @return correspondentBankAddress
  **/
  @Schema(description = "The correspondent's bank full address")
  public String getCorrespondentBankAddress() {
    return correspondentBankAddress;
  }

  public void setCorrespondentBankAddress(String correspondentBankAddress) {
    this.correspondentBankAddress = correspondentBankAddress;
  }

  public SWIFTPaymentAttributes correspondentBankSwiftCode(String correspondentBankSwiftCode) {
    this.correspondentBankSwiftCode = correspondentBankSwiftCode;
    return this;
  }

   /**
   * The correspondent&#x27;s bank SWIFT code
   * @return correspondentBankSwiftCode
  **/
  @Schema(description = "The correspondent's bank SWIFT code")
  public String getCorrespondentBankSwiftCode() {
    return correspondentBankSwiftCode;
  }

  public void setCorrespondentBankSwiftCode(String correspondentBankSwiftCode) {
    this.correspondentBankSwiftCode = correspondentBankSwiftCode;
  }

  public SWIFTPaymentAttributes chargeBearer(ChargeBearerEnum chargeBearer) {
    this.chargeBearer = chargeBearer;
    return this;
  }

   /**
   * Get chargeBearer
   * @return chargeBearer
  **/
  @Schema(description = "")
  public ChargeBearerEnum getChargeBearer() {
    return chargeBearer;
  }

  public void setChargeBearer(ChargeBearerEnum chargeBearer) {
    this.chargeBearer = chargeBearer;
  }

  public SWIFTPaymentAttributes priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @Schema(description = "")
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SWIFTPaymentAttributes swIFTPaymentAttributes = (SWIFTPaymentAttributes) o;
    return Objects.equals(this.currencyCode, swIFTPaymentAttributes.currencyCode) &&
        Objects.equals(this.debtorAccountNumber, swIFTPaymentAttributes.debtorAccountNumber) &&
        Objects.equals(this.creditorAccountNumber, swIFTPaymentAttributes.creditorAccountNumber) &&
        Objects.equals(this.creditorBankSwiftCode, swIFTPaymentAttributes.creditorBankSwiftCode) &&
        Objects.equals(this.creditorBankName, swIFTPaymentAttributes.creditorBankName) &&
        Objects.equals(this.creditorBankAddress, swIFTPaymentAttributes.creditorBankAddress) &&
        Objects.equals(this.creditorBankStreetName, swIFTPaymentAttributes.creditorBankStreetName) &&
        Objects.equals(this.creditorBankBuildingNumber, swIFTPaymentAttributes.creditorBankBuildingNumber) &&
        Objects.equals(this.creditorBankPostCode, swIFTPaymentAttributes.creditorBankPostCode) &&
        Objects.equals(this.creditorBankTown, swIFTPaymentAttributes.creditorBankTown) &&
        Objects.equals(this.creditorBankRegion, swIFTPaymentAttributes.creditorBankRegion) &&
        Objects.equals(this.creditorBankCountryCode, swIFTPaymentAttributes.creditorBankCountryCode) &&
        Objects.equals(this.correspondentAccountNumber, swIFTPaymentAttributes.correspondentAccountNumber) &&
        Objects.equals(this.correspondentBankName, swIFTPaymentAttributes.correspondentBankName) &&
        Objects.equals(this.correspondentBankAddress, swIFTPaymentAttributes.correspondentBankAddress) &&
        Objects.equals(this.correspondentBankSwiftCode, swIFTPaymentAttributes.correspondentBankSwiftCode) &&
        Objects.equals(this.chargeBearer, swIFTPaymentAttributes.chargeBearer) &&
        Objects.equals(this.priority, swIFTPaymentAttributes.priority) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, debtorAccountNumber, creditorAccountNumber, creditorBankSwiftCode, creditorBankName, creditorBankAddress, creditorBankStreetName, creditorBankBuildingNumber, creditorBankPostCode, creditorBankTown, creditorBankRegion, creditorBankCountryCode, correspondentAccountNumber, correspondentBankName, correspondentBankAddress, correspondentBankSwiftCode, chargeBearer, priority, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SWIFTPaymentAttributes {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    debtorAccountNumber: ").append(toIndentedString(debtorAccountNumber)).append("\n");
    sb.append("    creditorAccountNumber: ").append(toIndentedString(creditorAccountNumber)).append("\n");
    sb.append("    creditorBankSwiftCode: ").append(toIndentedString(creditorBankSwiftCode)).append("\n");
    sb.append("    creditorBankName: ").append(toIndentedString(creditorBankName)).append("\n");
    sb.append("    creditorBankAddress: ").append(toIndentedString(creditorBankAddress)).append("\n");
    sb.append("    creditorBankStreetName: ").append(toIndentedString(creditorBankStreetName)).append("\n");
    sb.append("    creditorBankBuildingNumber: ").append(toIndentedString(creditorBankBuildingNumber)).append("\n");
    sb.append("    creditorBankPostCode: ").append(toIndentedString(creditorBankPostCode)).append("\n");
    sb.append("    creditorBankTown: ").append(toIndentedString(creditorBankTown)).append("\n");
    sb.append("    creditorBankRegion: ").append(toIndentedString(creditorBankRegion)).append("\n");
    sb.append("    creditorBankCountryCode: ").append(toIndentedString(creditorBankCountryCode)).append("\n");
    sb.append("    correspondentAccountNumber: ").append(toIndentedString(correspondentAccountNumber)).append("\n");
    sb.append("    correspondentBankName: ").append(toIndentedString(correspondentBankName)).append("\n");
    sb.append("    correspondentBankAddress: ").append(toIndentedString(correspondentBankAddress)).append("\n");
    sb.append("    correspondentBankSwiftCode: ").append(toIndentedString(correspondentBankSwiftCode)).append("\n");
    sb.append("    chargeBearer: ").append(toIndentedString(chargeBearer)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
