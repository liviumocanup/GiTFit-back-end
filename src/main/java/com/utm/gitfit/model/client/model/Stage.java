/*
 * Salt Edge Payment Initiation API
 * API Reference for services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@saltedge.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.utm.gitfit.model.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * The following represents the objects you get in the &#x60;stages&#x60; field of the payment object.
 */
@Schema(description = "The following represents the objects you get in the `stages` field of the payment object.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-11-21T15:13:42.040Z[GMT]")
public class Stage {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("interactive_html")
  private String interactiveHtml = null;

  @SerializedName("interactive_fields_names")
  private List<String> interactiveFieldsNames = null;

  @SerializedName("error_class")
  private String errorClass = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  public Stage id(String id) {
    this.id = id;
    return this;
  }

   /**
   * the &#x60;id&#x60; of the stage
   * @return id
  **/
  @Schema(required = true, description = "the `id` of the stage")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Stage name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the name of the stage. Possible values:    - &#x60;initialize&#x60; - the payment object was created   - &#x60;start&#x60; - the payment process has just begun   - &#x60;interactive&#x60; - waiting for the interactive input   - &#x60;submission&#x60; - preparing a payment initiation request for submission to the financial institution   - &#x60;settlement&#x60; - payment initiation request accepted by the financial institution, waiting for settlement to complete   - &#x60;completed&#x60; - payment initiation settlement has been completed, funds have been sent   - &#x60;finish&#x60; - wrapping up the payment process. 
   * @return name
  **/
  @Schema(required = true, description = "the name of the stage. Possible values:    - `initialize` - the payment object was created   - `start` - the payment process has just begun   - `interactive` - waiting for the interactive input   - `submission` - preparing a payment initiation request for submission to the financial institution   - `settlement` - payment initiation request accepted by the financial institution, waiting for settlement to complete   - `completed` - payment initiation settlement has been completed, funds have been sent   - `finish` - wrapping up the payment process. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Stage interactiveHtml(String interactiveHtml) {
    this.interactiveHtml = interactiveHtml;
    return this;
  }

   /**
   * HTML code that shows the current interactive state of the payment. Appears only for the interactive providers. 
   * @return interactiveHtml
  **/
  @Schema(description = "HTML code that shows the current interactive state of the payment. Appears only for the interactive providers. ")
  public String getInteractiveHtml() {
    return interactiveHtml;
  }

  public void setInteractiveHtml(String interactiveHtml) {
    this.interactiveHtml = interactiveHtml;
  }

  public Stage interactiveFieldsNames(List<String> interactiveFieldsNames) {
    this.interactiveFieldsNames = interactiveFieldsNames;
    return this;
  }

  public Stage addInteractiveFieldsNamesItem(String interactiveFieldsNamesItem) {
    if (this.interactiveFieldsNames == null) {
      this.interactiveFieldsNames = new ArrayList<String>();
    }
    this.interactiveFieldsNames.add(interactiveFieldsNamesItem);
    return this;
  }

   /**
   * the interactive fields that are currently required by the provider of the payment. Appears only for the interactive providers. 
   * @return interactiveFieldsNames
  **/
  @Schema(description = "the interactive fields that are currently required by the provider of the payment. Appears only for the interactive providers. ")
  public List<String> getInteractiveFieldsNames() {
    return interactiveFieldsNames;
  }

  public void setInteractiveFieldsNames(List<String> interactiveFieldsNames) {
    this.interactiveFieldsNames = interactiveFieldsNames;
  }

  public Stage errorClass(String errorClass) {
    this.errorClass = errorClass;
    return this;
  }

   /**
   * error class name. Appears only when an error occurs.
   * @return errorClass
  **/
  @Schema(description = "error class name. Appears only when an error occurs.")
  public String getErrorClass() {
    return errorClass;
  }

  public void setErrorClass(String errorClass) {
    this.errorClass = errorClass;
  }

  public Stage message(String message) {
    this.message = message;
    return this;
  }

   /**
   * brief error description. Appears only when an error occurs.
   * @return message
  **/
  @Schema(description = "brief error description. Appears only when an error occurs.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public Stage createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * time and date when the stage was created
   * @return createdAt
  **/
  @Schema(required = true, description = "time and date when the stage was created")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stage stage = (Stage) o;
    return Objects.equals(this.id, stage.id) &&
        Objects.equals(this.name, stage.name) &&
        Objects.equals(this.interactiveHtml, stage.interactiveHtml) &&
        Objects.equals(this.interactiveFieldsNames, stage.interactiveFieldsNames) &&
        Objects.equals(this.errorClass, stage.errorClass) &&
        Objects.equals(this.message, stage.message) &&
        Objects.equals(this.createdAt, stage.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, interactiveHtml, interactiveFieldsNames, errorClass, message, createdAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stage {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    interactiveHtml: ").append(toIndentedString(interactiveHtml)).append("\n");
    sb.append("    interactiveFieldsNames: ").append(toIndentedString(interactiveFieldsNames)).append("\n");
    sb.append("    errorClass: ").append(toIndentedString(errorClass)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
