/*
 * Salt Edge Payment Initiation API
 * API Reference for services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@saltedge.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.utm.gitfit.model.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * The payment template resource contains a set of required and optional fields that need to be filled in order to successfully execute a payment. Different payment templates serve different purposes. 
 */
@Schema(description = "The payment template resource contains a set of required and optional fields that need to be filled in order to successfully execute a payment. Different payment templates serve different purposes. ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-11-21T15:13:42.040Z[GMT]")
public class Template {
  @SerializedName("id")
  private String id = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("deprecated")
  private Boolean deprecated = null;

  @SerializedName("payment_fields")
  private List<TemplatePaymentField> paymentFields = new ArrayList<TemplatePaymentField>();

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  public Template id(String id) {
    this.id = id;
    return this;
  }

   /**
   * the &#x60;id&#x60; of the payment template
   * @return id
  **/
  @Schema(required = true, description = "the `id` of the payment template")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Template identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * unique identifier of the payment template
   * @return identifier
  **/
  @Schema(required = true, description = "unique identifier of the payment template")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public Template description(String description) {
    this.description = description;
    return this;
  }

   /**
   * additional information related to the template
   * @return description
  **/
  @Schema(required = true, description = "additional information related to the template")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Template deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * whether the payment template is deprecated or not. Deprecated payment templates will be removed in the next API version.
   * @return deprecated
  **/
  @Schema(required = true, description = "whether the payment template is deprecated or not. Deprecated payment templates will be removed in the next API version.")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public Template paymentFields(List<TemplatePaymentField> paymentFields) {
    this.paymentFields = paymentFields;
    return this;
  }

  public Template addPaymentFieldsItem(TemplatePaymentField paymentFieldsItem) {
    this.paymentFields.add(paymentFieldsItem);
    return this;
  }

   /**
   * [payment field objects](#payment_templates-fields)
   * @return paymentFields
  **/
  @Schema(required = true, description = "[payment field objects](#payment_templates-fields)")
  public List<TemplatePaymentField> getPaymentFields() {
    return paymentFields;
  }

  public void setPaymentFields(List<TemplatePaymentField> paymentFields) {
    this.paymentFields = paymentFields;
  }

  public Template createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * time and date when the payment template was added
   * @return createdAt
  **/
  @Schema(required = true, description = "time and date when the payment template was added")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Template updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * the last time when any of the template’s attributes were changed
   * @return updatedAt
  **/
  @Schema(required = true, description = "the last time when any of the template’s attributes were changed")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Template template = (Template) o;
    return Objects.equals(this.id, template.id) &&
        Objects.equals(this.identifier, template.identifier) &&
        Objects.equals(this.description, template.description) &&
        Objects.equals(this.deprecated, template.deprecated) &&
        Objects.equals(this.paymentFields, template.paymentFields) &&
        Objects.equals(this.createdAt, template.createdAt) &&
        Objects.equals(this.updatedAt, template.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, identifier, description, deprecated, paymentFields, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Template {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    paymentFields: ").append(toIndentedString(paymentFields)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
