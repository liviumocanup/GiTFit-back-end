/*
 * Salt Edge Payment Initiation API
 * API Reference for services
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@saltedge.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.utm.gitfit.model.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.Objects;
/**
 * TemplatePaymentField
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-11-21T15:13:42.040Z[GMT]")
public class TemplatePaymentField {
  @SerializedName("id")
  private String id = null;

  @SerializedName("payment_template_id")
  private String paymentTemplateId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("english_name")
  private String englishName = null;

  @SerializedName("localized_name")
  private String localizedName = null;

  /**
   * Nature
   */
  @JsonAdapter(NatureEnum.Adapter.class)
  public enum NatureEnum {
    TEXT("text"),
    PASSWORD("password"),
    SELECT("select"),
    FILE("file"),
    NUMBER("number"),
    DYNAMIC_SELECT("dynamic_select");

    private String value;

    NatureEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NatureEnum fromValue(String input) {
      for (NatureEnum b : NatureEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NatureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NatureEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NatureEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NatureEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("nature")
  private NatureEnum nature = null;

  @SerializedName("position")
  private Integer position = null;

  @SerializedName("extra")
  private TemplatePaymentExtraField extra = null;

  @SerializedName("optional")
  private Boolean optional = null;

  @SerializedName("field_options")
  private Object fieldOptions = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  public TemplatePaymentField id(String id) {
    this.id = id;
    return this;
  }

   /**
   * the &#x60;id&#x60; of the payment field
   * @return id
  **/
  @Schema(required = true, description = "the `id` of the payment field")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TemplatePaymentField paymentTemplateId(String paymentTemplateId) {
    this.paymentTemplateId = paymentTemplateId;
    return this;
  }

   /**
   * the &#x60;id&#x60; of the [payment template](#payment_templates)
   * @return paymentTemplateId
  **/
  @Schema(required = true, description = "the `id` of the [payment template](#payment_templates)")
  public String getPaymentTemplateId() {
    return paymentTemplateId;
  }

  public void setPaymentTemplateId(String paymentTemplateId) {
    this.paymentTemplateId = paymentTemplateId;
  }

  public TemplatePaymentField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * the field’s name that should be used as a key in the credentials object
   * @return name
  **/
  @Schema(description = "the field’s name that should be used as a key in the credentials object")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TemplatePaymentField englishName(String englishName) {
    this.englishName = englishName;
    return this;
  }

   /**
   * the field’s name in US English
   * @return englishName
  **/
  @Schema(description = "the field’s name in US English")
  public String getEnglishName() {
    return englishName;
  }

  public void setEnglishName(String englishName) {
    this.englishName = englishName;
  }

  public TemplatePaymentField localizedName(String localizedName) {
    this.localizedName = localizedName;
    return this;
  }

   /**
   * The field’s name in the provider&#x27;s main language
   * @return localizedName
  **/
  @Schema(description = "The field’s name in the provider's main language")
  public String getLocalizedName() {
    return localizedName;
  }

  public void setLocalizedName(String localizedName) {
    this.localizedName = localizedName;
  }

  public TemplatePaymentField nature(NatureEnum nature) {
    this.nature = nature;
    return this;
  }

   /**
   * Nature
   * @return nature
  **/
  @Schema(description = "Nature")
  public NatureEnum getNature() {
    return nature;
  }

  public void setNature(NatureEnum nature) {
    this.nature = nature;
  }

  public TemplatePaymentField position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * the field’s position in the public user interface
   * @return position
  **/
  @Schema(description = "the field’s position in the public user interface")
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }

  public TemplatePaymentField extra(TemplatePaymentExtraField extra) {
    this.extra = extra;
    return this;
  }

   /**
   * Get extra
   * @return extra
  **/
  @Schema(description = "")
  public TemplatePaymentExtraField getExtra() {
    return extra;
  }

  public void setExtra(TemplatePaymentExtraField extra) {
    this.extra = extra;
  }

  public TemplatePaymentField optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

   /**
   * whether the input for this field is optional or not
   * @return optional
  **/
  @Schema(description = "whether the input for this field is optional or not")
  public Boolean isOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }

  public TemplatePaymentField fieldOptions(Object fieldOptions) {
    this.fieldOptions = fieldOptions;
    return this;
  }

   /**
   * only for the &#x60;select&#x60; field type. Contains the options for the select.
   * @return fieldOptions
  **/
  @Schema(description = "only for the `select` field type. Contains the options for the select.")
  public Object getFieldOptions() {
    return fieldOptions;
  }

  public void setFieldOptions(Object fieldOptions) {
    this.fieldOptions = fieldOptions;
  }

  public TemplatePaymentField createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * time and date when the payment field was added
   * @return createdAt
  **/
  @Schema(required = true, description = "time and date when the payment field was added")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public TemplatePaymentField updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * the last time when any of the payment field’s attributes were changed
   * @return updatedAt
  **/
  @Schema(required = true, description = "the last time when any of the payment field’s attributes were changed")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplatePaymentField templatePaymentField = (TemplatePaymentField) o;
    return Objects.equals(this.id, templatePaymentField.id) &&
        Objects.equals(this.paymentTemplateId, templatePaymentField.paymentTemplateId) &&
        Objects.equals(this.name, templatePaymentField.name) &&
        Objects.equals(this.englishName, templatePaymentField.englishName) &&
        Objects.equals(this.localizedName, templatePaymentField.localizedName) &&
        Objects.equals(this.nature, templatePaymentField.nature) &&
        Objects.equals(this.position, templatePaymentField.position) &&
        Objects.equals(this.extra, templatePaymentField.extra) &&
        Objects.equals(this.optional, templatePaymentField.optional) &&
        Objects.equals(this.fieldOptions, templatePaymentField.fieldOptions) &&
        Objects.equals(this.createdAt, templatePaymentField.createdAt) &&
        Objects.equals(this.updatedAt, templatePaymentField.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, paymentTemplateId, name, englishName, localizedName, nature, position, extra, optional, fieldOptions, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplatePaymentField {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    paymentTemplateId: ").append(toIndentedString(paymentTemplateId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    englishName: ").append(toIndentedString(englishName)).append("\n");
    sb.append("    localizedName: ").append(toIndentedString(localizedName)).append("\n");
    sb.append("    nature: ").append(toIndentedString(nature)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    fieldOptions: ").append(toIndentedString(fieldOptions)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
